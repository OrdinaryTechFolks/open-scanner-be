// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/opencv.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ImageMultiError, or nil if none found.
func (m *Image) ValidateAll() error {
	return m.validate(true)
}

func (m *Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Channels

	// no validation rules for Data

	if len(errors) > 0 {
		return ImageMultiError(errors)
	}

	return nil
}

// ImageMultiError is an error wrapping multiple validation errors returned by
// Image.ValidateAll() if the designated constraints aren't met.
type ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMultiError) AllErrors() []error { return m }

// ImageValidationError is the validation error returned by Image.Validate if
// the designated constraints aren't met.
type ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageValidationError) ErrorName() string { return "ImageValidationError" }

// Error satisfies the builtin error interface
func (e ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageValidationError{}

// Validate checks the field values on Point2F with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Point2F) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Point2F with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Point2FMultiError, or nil if none found.
func (m *Point2F) ValidateAll() error {
	return m.validate(true)
}

func (m *Point2F) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return Point2FMultiError(errors)
	}

	return nil
}

// Point2FMultiError is an error wrapping multiple validation errors returned
// by Point2F.ValidateAll() if the designated constraints aren't met.
type Point2FMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Point2FMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Point2FMultiError) AllErrors() []error { return m }

// Point2FValidationError is the validation error returned by Point2F.Validate
// if the designated constraints aren't met.
type Point2FValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Point2FValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Point2FValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Point2FValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Point2FValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Point2FValidationError) ErrorName() string { return "Point2FValidationError" }

// Error satisfies the builtin error interface
func (e Point2FValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoint2F.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Point2FValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Point2FValidationError{}

// Validate checks the field values on Size2F with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Size2F) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Size2F with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Size2FMultiError, or nil if none found.
func (m *Size2F) ValidateAll() error {
	return m.validate(true)
}

func (m *Size2F) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	if len(errors) > 0 {
		return Size2FMultiError(errors)
	}

	return nil
}

// Size2FMultiError is an error wrapping multiple validation errors returned by
// Size2F.ValidateAll() if the designated constraints aren't met.
type Size2FMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Size2FMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Size2FMultiError) AllErrors() []error { return m }

// Size2FValidationError is the validation error returned by Size2F.Validate if
// the designated constraints aren't met.
type Size2FValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Size2FValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Size2FValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Size2FValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Size2FValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Size2FValidationError) ErrorName() string { return "Size2FValidationError" }

// Error satisfies the builtin error interface
func (e Size2FValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSize2F.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Size2FValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Size2FValidationError{}

// Validate checks the field values on WarpPerspectiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WarpPerspectiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WarpPerspectiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WarpPerspectiveRequestMultiError, or nil if none found.
func (m *WarpPerspectiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WarpPerspectiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSrcImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WarpPerspectiveRequestValidationError{
					field:  "SrcImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WarpPerspectiveRequestValidationError{
					field:  "SrcImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSrcImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WarpPerspectiveRequestValidationError{
				field:  "SrcImage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSrcCorners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WarpPerspectiveRequestValidationError{
						field:  fmt.Sprintf("SrcCorners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WarpPerspectiveRequestValidationError{
						field:  fmt.Sprintf("SrcCorners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WarpPerspectiveRequestValidationError{
					field:  fmt.Sprintf("SrcCorners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDestSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WarpPerspectiveRequestValidationError{
					field:  "DestSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WarpPerspectiveRequestValidationError{
					field:  "DestSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WarpPerspectiveRequestValidationError{
				field:  "DestSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WarpPerspectiveRequestMultiError(errors)
	}

	return nil
}

// WarpPerspectiveRequestMultiError is an error wrapping multiple validation
// errors returned by WarpPerspectiveRequest.ValidateAll() if the designated
// constraints aren't met.
type WarpPerspectiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WarpPerspectiveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WarpPerspectiveRequestMultiError) AllErrors() []error { return m }

// WarpPerspectiveRequestValidationError is the validation error returned by
// WarpPerspectiveRequest.Validate if the designated constraints aren't met.
type WarpPerspectiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarpPerspectiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarpPerspectiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarpPerspectiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarpPerspectiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarpPerspectiveRequestValidationError) ErrorName() string {
	return "WarpPerspectiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WarpPerspectiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarpPerspectiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarpPerspectiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarpPerspectiveRequestValidationError{}
